@page "/LogOutNow"

<h3>Time Window Management</h3>

@using Backend;
@using System.Linq;

@*grayed buttons seems more disabled*@
<style>
.btn-primary.disabled, .btn-primary:disabled
{
    background-color: gray;
    // etc.
}
</style>

<EditForm Model="logOutNowManagement">
    <select 
    @onchange="logOutNowManagement.OnValueChanged">
        @foreach (string user in logOutNowManagement.users)
        {
            <option>@user</option>
        }
    </select>
    <CascadingAuthenticationState>
    <AuthorizeView Context="LogOutNow">
    <br /><button class="btn btn-primary" disabled="@logOutNowManagement.IsDisabledDisabledUser" @onclick="logOutNowManagement.DisableUser">Log out Now</button>
    <br /><button class="btn btn-primary" disabled="@logOutNowManagement.IsDisabledEnabledUser" @onclick="logOutNowManagement.EnableUser">Rollback Log out</button>
        </AuthorizeView>
    </CascadingAuthenticationState>
    <br /><br /><label>@logOutNowManagement.FeedbackMessage</label>

</EditForm>

@code {
    LogOutNowManagement logOutNowManagement = new LogOutNowManagement();

    class LogOutNowManagement
    {
        public Dictionary<string,string> windowStart=new Dictionary<string, string>();
        public Dictionary<string,string> windowEnd=new Dictionary<string, string>();

        private string currentUser;
        private ProcessSQL pSQL;
        public int secondsToday;

        public bool IsDisabledDisabledUser { get; set; }
        public bool IsDisabledEnabledUser { get; set; }

        public List<string> users = new List<string>();
        public string FeedbackMessage { get; set; }

        public LogOutNowManagement()
        {
            FeedbackMessage="";
            pSQL = new ProcessSQL();
            users = Monitor.users;
            currentUser = users[0];
            EnableOrDisableButtons(currentUser);

            //users.Add("alexa");
            //users.Add("Saray");
        }


        public Task OnValueChanged(ChangeEventArgs e)
        {
            currentUser = (string)e.Value;
            secondsToday=pSQL.GetUserConsumedSeconds(currentUser);
            EnableOrDisableButtons(currentUser);
            //users=pSQL.GetUsers();

            return Task.CompletedTask;

        }
        public async Task DisableUser()
        {
            pSQL.AddLogoutNow(currentUser);
            EnableOrDisableButtons(currentUser);
            await GiveFeedback();
        }
        public async Task EnableUser()
        {
            pSQL.RemoveLogoutNow(currentUser);
            EnableOrDisableButtons(currentUser);
            await GiveFeedback();
        }
        public void EnableOrDisableButtons(string userName)
        {
            if (pSQL.GetLogougNowStatusForUser(currentUser) == true)
            {
                IsDisabledEnabledUser = false;
                IsDisabledDisabledUser = true;
            }
            else
            {
                IsDisabledEnabledUser = true;
                IsDisabledDisabledUser = false;
            }
        }
        private async Task GiveFeedback()
        {
            FeedbackMessage = $@"";
            await Task.Delay(200);
            FeedbackMessage = $@"Processed {System.DateTime.Now.ToString()}";
        }

    }



}
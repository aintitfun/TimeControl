@page "/TimeWindow"
<h3>Time Window Management</h3>

@using Backend;
@using System.Linq;

<EditForm Model="timeWindowManagement">
    <select 
    @onchange="timeWindowManagement.OnValueChanged">
        @foreach (string user in timeWindowManagement.users)
        {
            <option>@user</option>
        }
    </select>
        <br />monday:   <input @bind='timeWindowManagement.windowStart["monday"]' />      <input @bind='timeWindowManagement.windowEnd["monday"]' />
        <br />tuesday:  <input @bind='timeWindowManagement.windowStart["tuesday" ]'  />   <input @bind='timeWindowManagement.windowEnd["tuesday" ]'  />
        <br />wednesday:<input @bind='timeWindowManagement.windowStart["wednesday"] '  /> <input @bind='timeWindowManagement.windowEnd["wednesday"] '  />
        <br />thursday: <input @bind='timeWindowManagement.windowStart["thursday"]'  />   <input @bind='timeWindowManagement.windowEnd["thursday"]'  />
        <br />friday:   <input @bind='timeWindowManagement.windowStart["friday"]'  />     <input @bind='timeWindowManagement.windowEnd["friday"]'  />
        <br />saturday: <input @bind='timeWindowManagement.windowStart["saturday"]'  />   <input @bind='timeWindowManagement.windowEnd["saturday"]'  />
        <br />sunday:   <input @bind='timeWindowManagement.windowStart["sunday"]'  />     <input @bind='timeWindowManagement.windowEnd["sunday"]'  />

    <br /><label>
        Consumed time (minutes): 
        <input @bind="timeWindowManagement.secondsToday" />
    </label>

    <br /><button class="btn btn-primary" @onclick="timeWindowManagement.CommitValues">Commit Values</button>
    <br /><br /><label>@timeWindowManagement.FeedbackMessage</label>

</EditForm>

@code {
    TimeWindowManagement timeWindowManagement = new TimeWindowManagement();

    class TimeWindowManagement
    {
        public Dictionary<string,string> windowStart=new Dictionary<string, string>();
        public Dictionary<string,string> windowEnd=new Dictionary<string, string>();

        private string currentUser;
        private ProcessSQL pSQL;
        public int secondsToday;
        //public int monday=0;
        //public int tuesday=0;
        //public int wednesday=0;
        //public int thursday=0;
        //public int friday=0;
        //public int saturday=0;
        //public int sunday=0;

        public List<string> users = new List<string>();
        public string FeedbackMessage { get; set; }

        public TimeWindowManagement()
        {
            FeedbackMessage="";
            pSQL = new ProcessSQL();
            secondsToday = 0;
            users = Monitor.users;
            currentUser = users[0];

            windowStart.Add("monday","0830");
            windowStart.Add("tuesday","0830");
            windowStart.Add("wednesday","0830");
            windowStart.Add("thursday","0830");
            windowStart.Add("friday","0830");
            windowStart.Add("saturday","0830");
            windowStart.Add("sunday","0830");

            windowEnd.Add("monday","2130");
            windowEnd.Add("tuesday","2130");
            windowEnd.Add("wednesday","2130");
            windowEnd.Add("thursday","2130");
            windowEnd.Add("friday","2130");
            windowEnd.Add("saturday","2130");
            windowEnd.Add("sunday","2130");

            PopulateWeek();
            //users.Add("alexa");
            //users.Add("Saray");
        }

        public void PopulateWeek()
        {
            foreach (AppsPersist app in pSQL.GetConfiguredLogins().Where(m => m._userName == currentUser))
            {
                AppsPersist app2 = pSQL.GetConfiguredLogouts().Where(m => m._userName == currentUser && m._dayOfTheWeek==app._dayOfTheWeek).First();
                windowStart[app._dayOfTheWeek.ToLower()] = app._time.ToString().PadLeft(4,'0');
                windowEnd[app._dayOfTheWeek.ToLower()] = app2._time.ToString().PadLeft(4,'0');;
            }
        }

        public Task OnValueChanged(ChangeEventArgs e)
        {
            currentUser = (string)e.Value;
            secondsToday=pSQL.GetUserConsumedSeconds(currentUser);

            //users=pSQL.GetUsers();
            PopulateWeek();

            return Task.CompletedTask;

        }
        public async Task CommitValues()
        {
            foreach (string d in windowStart.Keys)
            {
                pSQL.RemoveLogin(currentUser, d);
                pSQL.AddLogin(currentUser, Int32.Parse(windowStart[d]), d);
            }
            foreach (string d in windowEnd.Keys)
            {
                pSQL.RemoveLogout(currentUser, d);
                pSQL.AddLogout(currentUser, Int32.Parse(windowEnd[d]), d);
            }
            await GiveFeedback();        
        }
        private async Task GiveFeedback()
        {
            FeedbackMessage = $@"";
            await Task.Delay(200);
            FeedbackMessage = $@"Processed {System.DateTime.Now.ToString()}";
        }


    }



}
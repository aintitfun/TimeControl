@page "/AppsProhibited"
<h3>Prohibited Apps</h3>

@using Backend;
@using System.Linq;

<EditForm Model="appsProhibited">
    <select 
    @onchange="appsProhibited.OnUserValueChanged">
        @foreach (string user in appsProhibited.users)
        {
            <option>@user</option>
        }
    </select>
    <select 
    @onchange="appsProhibited.OnAppValueChanged"
    disabled="@appsProhibited.IsDisabled" >
        @foreach (string app in appsProhibited.apps)
        {
            <option>@app</option>
        }
    </select>
    <br />monday:   <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["monday"]' />
    <br />tuesday:  <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["tuesday" ]'  />
    <br />wednesday:<input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["wednesday"] '  />
    <br />thursday: <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["thursday"]'  />
    <br />friday:   <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["friday"]'  />
    <br />saturday: <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["saturday"]'  />
    <br />sunday:   <input disabled="@appsProhibited.IsDisabled" @bind='appsProhibited.dayOfTheWeekAndTime["sunday"]'  />
    <br /><button class="btn btn-primary" @onclick="appsProhibited.UpdateApp">Update App</button>
    <button class="btn btn-primary" @onclick="appsProhibited.DeleteApp">Delete App</button>

    <br />App to add: <input  @bind='appsProhibited.appToAdd'  />
    <br /><button class="btn btn-primary" @onclick="appsProhibited.AddApp">Add App</button>
    <br /><br /><label>@appsProhibited.FeedbackMessage</label>

</EditForm>

@code {
    @inject NavigationManager NavigationManager;

    AppsProhibitedManagement appsProhibited = new AppsProhibitedManagement();

    class AppsProhibitedManagement
    {
        public Dictionary<string,int> dayOfTheWeekAndTime=new Dictionary<string, int>();
        private string currentUser;
        private string? currentApp;
        private ProcessSQL pSQL;
        private Monitor vMon;
        public bool IsDisabled = false;
        


        public List<string> users = new List<string>();
        public List<string> apps = new List<string>();
        public string appToAdd;
        public string FeedbackMessage { get; set; }
        private NavigationManager navigationManager;
        public AppsProhibitedManagement()
        {
            FeedbackMessage="";
            pSQL = new ProcessSQL();
            users = Monitor.users;
            currentUser = users[0];
            apps = pSQL.GetApps().Where(m => m._userName == currentUser).Select(m => m._app).Distinct().ToList<string>();
            dayOfTheWeekAndTime.Add("monday",0);
            dayOfTheWeekAndTime.Add("tuesday",0);
            dayOfTheWeekAndTime.Add("wednesday",0);
            dayOfTheWeekAndTime.Add("thursday",0);
            dayOfTheWeekAndTime.Add("friday",0);
            dayOfTheWeekAndTime.Add("saturday",0);
            dayOfTheWeekAndTime.Add("sunday",0);

            if (apps.Count()>0)
            {
                IsDisabled = false;
                currentApp = apps[0];

                PopulateApps();
                PopulateWeek();
            }
            else 
            {
                IsDisabled = true;

                currentApp = "";

                PopulateApps();
                PopulateWeek();
            }
        }

        public void PopulateWeek()
        {
            foreach (AppsPersist app in pSQL.GetApps().Where(m => m._userName == currentUser &&
                                                                  m._app==currentApp  ))
            {
                dayOfTheWeekAndTime[app._dayOfTheWeek.ToLower()] = app._time;
            }
        }
        public void PopulateApps()
        {

            apps = pSQL.GetApps().Where(m => m._userName == currentUser).Select(m => m._app).Distinct().ToList<string>();
            if (apps.Count() > 0)
                IsDisabled = false;
            else
                IsDisabled = true;

            foreach (AppsPersist app in pSQL.GetApps().Where(m => m._userName == currentUser))
            {
                dayOfTheWeekAndTime[app._dayOfTheWeek.ToLower()] = app._time;
            }
        }
        public Task OnUserValueChanged(ChangeEventArgs e)
        {
            currentUser = (string)e.Value;

            //users=pSQL.GetUsers();
            PopulateApps();

            if (apps.Count() > 0)
                IsDisabled = false;
            else
                IsDisabled = true;

            if (apps.Count()>0)
                currentApp = apps[0];

            return Task.CompletedTask;

        }
        public Task OnAppValueChanged(ChangeEventArgs e)
        {
            currentApp = (string)e.Value;
            PopulateWeek();

            return Task.CompletedTask;

        }
        public async Task UpdateApp()
        {
            foreach (string d in dayOfTheWeekAndTime.Keys)
            {
                pSQL.RemoveApplicationFromUser(currentApp, currentUser, d);
                pSQL.AddApplication(currentApp, currentUser, dayOfTheWeekAndTime[d], d);
            }
            PopulateApps();
            PopulateWeek();
            await GiveFeedback();

        }
        public async Task AddApp()
        {
            foreach (string d in dayOfTheWeekAndTime.Keys)
            {
                pSQL.RemoveApplicationFromUser(appToAdd, currentUser, d);
                pSQL.AddApplication(appToAdd, currentUser, 0, d);
            }
            PopulateApps();
            PopulateWeek();
            //navigationManager.NavigateTo("/AppsProhibited");
            await GiveFeedback();
        }
        public async Task DeleteApp()
        {
            foreach (string d in dayOfTheWeekAndTime.Keys)
            {
                pSQL.RemoveApplicationFromUser(currentApp, currentUser, d);
            }
            PopulateApps();
            PopulateWeek();
            await GiveFeedback();
        }
        private async Task GiveFeedback()
        {
            FeedbackMessage = $@"";
            await Task.Delay(200);
            FeedbackMessage = $@"Processed {System.DateTime.Now.ToString()}";
        }

    }



}